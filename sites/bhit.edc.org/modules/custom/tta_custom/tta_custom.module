<?php
/**
 * @file
 * Site-specific functions.
 */

/**
 * Implements hook_permission().
 */
function tta_custom_permission() {
  return array(
    'administer tta site' => array(
      'title' => t('Administer T/TA Site'),
      'description' => t('Control T/TA Tracker features.'),
      ),
    'access vca info' => array(
      'title' => t('View user VCA info'),
      'description' => t('View VCA info in user profiles.'),
      ),
    'access expense info' => array(
      'title' => t('View user expense info'),
      'description' => t('View travel & labor expense info in user profiles.'),
      ),
    'assign roles' => array(
      'title' => t('Assign roles to users'),
      'description' => t('More limited than "Administer permission," only allows editing user roles.'),
      ),
    );
}

/**
 * Implements hook_menu().
 */
function tta_custom_menu() {
  $items = array();

  $items['admin/config/administration/tta_custom'] = array(
    'title' => 'TTA Site Options',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tta_custom_settings_form'),
    'file' => 'tta_custom.admin.inc',
    );

  $items['admin/config/administration/tta_custom/basic'] = array(
    'title' => 'Basic',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tta_custom_settings_form'),
    'file' => 'tta_custom.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    );

  $items['admin/config/administration/tta_custom/threshhold'] = array(
    'title' => 'VCA Threshholds',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tta_custom_threshhold_form'),
    'file' => 'tta_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
    );

  $items['admin/config/administration/tta_custom/texts'] = array(
    'title' => 'Message Texts',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tta_custom_texts_form'),
    'file' => 'tta_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
    );

  $items['admin/config/administration/tta_custom/year'] = array(
    'title' => 'TTA Service Year',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tta_custom_service_year_form'),
    'file' => 'tta_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
    );

  $items['create_vca/%user'] = array(
    'title' => 'Create a VCA',
    'access arguments' => array('create vca content'),
    'page callback' => 'tta_custom_vca_form',
    'page arguments' => array(1),
    );

  $items['create_expense/%user'] = array(
    'title' => 'Create an Expense record',
    'access arguments' => array('create expense content'),
    'page callback' => 'tta_custom_expense_form',
    'page arguments' => array(1),
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function tta_custom_theme() {
  return array(
    'tta_custom_settings_form' => array(
       'render element' => 'form',
       'file' => 'tta_custom.admin.inc',
       ),
    );
}

/**
 * Implements hook_help($path, $args).
 */
function tta_custom_help($path, $args) {
  switch ($path) {
    case 'admin/help#tta_custom':
      return '<p>'
        . t('The T/TA Custom module provides several additional functions to the site.')
        . ' '
        . t('It pre-fills some forms fields.')
        . '</p>';
  }
}

/**
 * Implements hook_admin_paths().
 * Keep user edit in normal theme.
 */
function tta_custom_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
  $paths['user/*/edit/main'] = FALSE;
  $paths['user/*/track'] = FALSE;
}

/**
 * Implements hook_field_extra_fields().
 */
function tta_custom_field_extra_fields() {
  $extra = array();

  $extra['node']['vca'] = array(
    'display' => array(
      'expense_button' => array(
        'label' => t('Create expense button'),
        'description' => t('Create expense button'),
        'weight' => -99,   // Default to top.
        ),
      ),
    );

  $extra['user']['user'] = array(
    'display' => array(
      'vcas' => array(
        'label' => t('Vendor Consulting Agreements'),
        'description' => t('Vendor Consulting Agreement List'),
        'weight' => 0,
        ),
      'expenses' => array(
        'label' => t('Labor and Travel Expenses'),
        'description' => t('Labor and Travel Expenses List'),
        'weight' => 0,
        ),
      'roles' => array(
        'label' => t('Roles'),
        'weight' => 0,
        ),
      'email_address' => array(
        'label' => t('Email address'),
        'weight' => 0,
        ),
      'vca_button' => array(
        'label' => t('"Create VCA" Button'),
        'weight' => -99,  // Default to top.
        ),
      ),
    );

  return $extra;
}

/**
 * Implements hook_menu_alter().
 * Intercept user/%/edit to limit acount editing to group.
 */
function tta_custom_menu_alter(&$items) {
  $items['user/%user/edit']['access callback'] = 'tta_custom_edit_access';
}

/**
 * Implements hook_theme_registry_alter().
 */
function tta_custom_theme_registry_alter(&$theme_registry) {
  // See if the default preprocess function is present.
  $core = array_search('template_preprocess_username', $theme_registry['username']['preprocess functions']);
  if ($core !== FALSE) {
    // Yes, it is, so let's replace it.
    // Note: it is important that my replacement be first.
    $mine = array_search('tta_custom_preprocess_username', $theme_registry['username']['preprocess functions']);
    unset($theme_registry['username']['preprocess functions'][$mine]);
    $theme_registry['username']['preprocess functions'][$core] = 'tta_custom_preprocess_username';
  }
}

/**
 * Implements theme_preprocess_username().
 * Because Core's implementation sucks...
 */
function tta_custom_preprocess_username(&$variables) {
  $account = $variables['account'];

  $variables['extra'] = '';
  if (empty($account->uid)) {
   $variables['uid'] = 0;
   if (theme_get_setting('toggle_comment_user_verification')) {
     $variables['extra'] = ' (' . t('not verified') . ')';
   }
  }
  else {
    $variables['uid'] = (int) $account->uid;
  }

  // Set the name to a formatted name that is safe for printing and
  // that won't break tables by being too long. Keep an unshortened,
  // unsanitized version, in case other preprocess functions want to implement
  // their own shortening logic or add markup. If they do so, they must ensure
  // that $variables['name'] is safe for printing.
  $name = isset($variables['name']) ? $variables['name'] : format_username($account);
  $max_name_len = variable_get('tta_custom_max_name_len', 20);
  if (drupal_strlen($name) > $max_name_len) {
    $name = drupal_substr($name, 0, $max_name_len - 3) . '...';
  }
//  $variables['name'] = check_plain($name);
  // It sees that names are already sanitized by linking to the account.
  $variables['name'] = $name;

  $variables['profile_access'] = user_access('access user profiles');
  $variables['link_attributes'] = array();
  // Populate link path and attributes if appropriate.
  if ($variables['uid'] && $variables['profile_access']) {
    // We are linking to a local user.
    $variables['link_attributes'] = array('title' => t('View user profile.'));
    $variables['link_path'] = 'user/' . $variables['uid'];
  }
  elseif (!empty($account->homepage)) {
    // Like the 'class' attribute, the 'rel' attribute can hold a
    // space-separated set of values, so initialize it as an array to make it
    // easier for other preprocess functions to append to it.
    $variables['link_attributes'] = array('rel' => array('nofollow'));
    $variables['link_path'] = $account->homepage;
    $variables['homepage'] = $account->homepage;
  }
  // We do not want the l() function to check_plain() a second time.
  $variables['link_options']['html'] = TRUE;
  // Set a default class.
  $variables['attributes_array'] = array('class' => array('username'));
}

/**
 * Implements hook_username_alter().
 */
function tta_custom_username_alter(&$name, $account) {
  static $names = array();
  if (!is_object($account)) {
    return t('Invalid User');
  }

  // If the uid is 0 or not present, assume the user is anonymous.
  // Also, new users don't have a profile built yet, so just go away.
  if (empty($account->uid) || (isset($account->is_new) && $account->is_new)) {
    return variable_get('anonymous', t('Anonymous'));
  }

  if (isset($names[$account->uid])) {
    $name = $names[$account->uid];
    return;
  }

  if (!isset($account->profile)) {
    $account->profile = tta_custom_load_profile($account);
  }
  $profile = entity_metadata_wrapper('profile2', $account->profile);

  if (empty($account->profile)) {
    $name = t('Invalid User');
    return;
  }

  $first = $profile->field_first_name->value();
  $last = $profile->field_last_name->value();
  if (empty($first) || empty($last)) {
    drupal_set_message(t('The first or last name for !user is missing.',
      array('!user' => l($account->name, "user/$account->uid"))),
      'warning');
    $name = (empty($first) ? '***' : $first)
      . ' '
      . (empty($last) ? '***' : $last);
  }
  else {
    $name = $first . ' ' . $last;
  }

  // Save it in case we need it again.
  $names[$account->uid] = $name;
}

/**
 * Helper function for loading a user profile.
 */
function tta_custom_load_profile($account) {
  $profile = profile2_load_by_user($account, 'main');

  if (empty($profile->uid)) {
    drupal_set_message(t('Could not access the profile for @name.',
      array('@name' => $account->name)), 'error');
    $x = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT);
    foreach ($x as $where) {
      if (empty($where['file'])) {
        $where['file'] = '???';
      }
      drupal_set_message($where['file'] . ' ' . $where['line']);
    }
//    dsm(print_r(debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT), true));
    return FALSE;
  }

  return $profile;
}

/**
 * Implements hook_action_info().
 */
function tta_custom_action_info() {
  $isp_state = variable_get('tta_custom_isp_state', '');
  $quarter_state = variable_get('tta_custom_quarter_state', '');
  $states = workflow_get_workflow_states_all();

  $actions = array(
    'tta_custom_isp_state_action' => array(
      'type' => 'node',
      'label' => t('Set to "@state"', array('@state' => $states[$isp_state])),
      'configurable' => FALSE,
      'triggers' => array('any'),
      ));

  if ($isp_state != $quarter_state) {
    $actions['tta_custom_quarter_state_action'] = array(
      'type' => 'node',
      'label' => t('Set to "@state"', array('@state' => $states[$quarter_state])),
      'configurable' => FALSE,
      'triggers' => array('any'),
      );
  }

  return $actions;
}

/**
 * VBO action to change the node's workflow state.
 */
function tta_custom_isp_state_action($node, $context) {
  $isp_state = variable_get('tta_custom_isp_state', '');

  // Fire the transition.
  workflow_execute_transition($node, $isp_state, t('Moved to ready state'), TRUE);
}

function tta_custom_quarter_state_action($node, $context) {
  $isp_state = variable_get('tta_custom_quarter_state', '');

  // Fire the transition.
  workflow_execute_transition($node, $isp_state, t('Moved to ready state'), TRUE);
}

/**
 * Helper function to control "Group content visibility" field.
 */
function tta_custom_check_visibility(&$form) {
  if (!user_access('administer group')) {
    $form['group_content_access']['#access'] = FALSE;
  }
}

/**
 * Menu access callback for user edit.
 * $account should be a full user object for the user selected.
 * $GLOBALS['user'] is the current user.
 */
function tta_custom_edit_access($account) {
  // Is this the current user?
  if ($GLOBALS['user']->uid == $account->uid && $account->uid > 0) {
    return TRUE;
  }

  // Is this an admin?
  if (user_access('administer site configuration')) {
    return TRUE;
  }

  // Can they administer users at all?
  if (!user_access('administer users')) {
    return FALSE;
  }

  // So now we need to check the groups.
  // Get the Core group, because those users are magic.
  $core = variable_get('tta_custom_core_group', 0);
  // Is current user in Core?
  if (og_is_member('node', $core, 'user')) {
    // Yep, let them skate.
    return TRUE;
  }

  // Get the viewed user's group value(s).
  $groups = field_get_items('user', $account, 'og_user_node');

  // Check if current user is in the same group(s).
  foreach ($groups as $group) {
    if (og_is_member('node', $group['target_id'], 'user')) {
      // Yes, they are in the viewed user's group.
      return TRUE;
    }
  }

  // If it hasn't been granted, then make sure they don't have it.
  return FALSE;
}

/**
 * Implements hook_form_alter().
 * Various changes in various forms.
 * See also: tta_custom_field_attach_view_alter
 *           tta_custom_costs_add_core
 *           tta_custom_field_attach_presave
 */
function tta_custom_form_alter(&$form, $form_state, $form_id) {
  global $user;
//  dsm($form, "tta_custom_form_alter: $form_id");

  switch ($form_id) {
    // Node edit form for Service content.
    case 'service_node_form':
      $form['title']['#maxlength'] = 130;

      // Need to hide the related trackers reference for non-admins.
      if (!user_access('bypass node access')) {
        $form['field_related_trackers']['#access'] = FALSE;
      }

      // Not sure why I have to do this.
      $form['og_group_ref'][LANGUAGE_NONE]['#title'] .= ' <span class="form-required" title="This field is required.">*</span>';

      tta_custom_check_visibility($form);

      return;

    // Node edit form for T/TA Tracker content.
    case 'tracker_node_form':
      $form['title']['#maxlength'] = 130;

      // There are some fields that incorrectly have a "n/a" value.
      $lang = $form['field_grant_program_or_initiativ']['#language'];
      unset($form['field_grant_program_or_initiativ'][$lang]['#options']['']);
      unset($form['field_type_of_service'][$lang]['#options']['']);

      // Need to hide the related costs reference for non-admins.
      if (!user_access('bypass node access')) {
        $form['field_related_costs']['#access'] = FALSE;

        // Let's do that for related service too.
        $form['field_service']['#access'] = FALSE;

        // Let's try to keep OG from reassigning the group on edit.
        unset($form['og_group_ref']);
      }

      // Not sure why I have to do this.
      if (isset($form['og_group_ref'][LANGUAGE_NONE])) {
        $form['og_group_ref'][LANGUAGE_NONE]['#title'] .= ' <span class="form-required" title="This field is required.">*</span>';
      }

      tta_custom_check_visibility($form);

      return;

    // Node edit form for Costs content.
    case 'costs_node_form':
      // Try to avoid AJAX error.
      form_load_include($form_state, 'inc', 'node', 'node.pages');
      form_load_include($form_state, 'inc', 'field_collection', 'field_collection.pages');

      tta_custom_check_visibility($form);

      // Hide the core group field.
      if (!user_access('administer group')) {
        $form['og_group_ref2']['#access'] = FALSE;
        // Try to prevent a group change.
        unset($form['og_group_ref']);
      }

      // Not sure why I have to do this.
      if (isset($form['og_group_ref'])) {
        $form['og_group_ref'][LANGUAGE_NONE]['#title'] .=
          ' <span class="form-required" title="This field is required.">*</span>';
      }

      return;

    // Node edit form for VCA content.
    case 'vca_node_form':
      tta_custom_check_visibility($form);

      // I don't think it's wise to change the group.
      $node = $form['#node'];

      // Block fields for non-admins.
      if (!user_access('bypass node access')) {
          $form['#groups']['group_miscellaneous']->format_type = 'hidden';
      }

      return;

    // Node edit form for Labor & Travel Expense content.
    case 'expense_node_form':
      tta_custom_check_visibility($form);

      // Hide corresponding VCA and Related user from non-admins.
      if (!user_access('bypass node access')) {
        $form['field_related_user']['#disabled'] = TRUE;
        $form['field_related_user'][LANGUAGE_NONE]['#required'] = FALSE;
        $form['field_corresponding_vca']['#attributes']['class'] = array('element-invisible');
      }

      // If this is for a consultant, we want to make the related VCA field required.
      $node = $form['#node'];
      $uid = array_pop(array_pop(field_get_items('node', $node, 'field_related_user')));

      $profile = tta_custom_load_profile($uid);
      $type = tta_custom_get_user_type($profile);
      if ($type == 'Consultant') {

        // Now let's find what VCAs the user owns.
        // The field_data_field_related_user table is used by both VCAs and Expenses,
        // so we can just look at the bundle column to select the VCAs.
        $query = "SELECT f.entity_id AS nid, n.title "
          . "FROM {field_data_field_related_user} f "
          . "INNER JOIN {node} n ON n.nid = f.entity_id "
          . "WHERE f.bundle = 'vca' AND f.field_related_user_target_id = :uid "
          . "ORDER BY n.created ASC "
          ;
        $nodes = db_query($query, array(':uid' => $uid))->fetchAllKeyed();
        // The field is required, so we do not add a "none" value.
        // This sets the allowed choices to what we just looked up.
        $form['field_corresponding_vca'][LANGUAGE_NONE]['#options'] = $nodes;
      }
      else {
        // Not a consultant, then no need for a VCA.
        $form['field_corresponding_vca'][LANGUAGE_NONE]['#access'] = FALSE;
      }
      return;

    // Allow special people to edit user roles.
    case 'user_profile_form':
    case 'user_register_form':
      // Do they have our special permission?
      if (isset($form['account']) && isset($form['account']['roles'])) {
        if (user_access('assign roles') && !$form['account']['roles']['#access']) {
          // Yes, so unlock the roles form element.
          $form['account']['roles']['#access'] = TRUE;
          // But remove "Administrator".
          $rid = array_search(t('Administrator'), $form['account']['roles']['#options']);
          if ($rid !== FALSE) {
            unset($form['account']['roles']['#options'][$rid]);
          }
        }
      }

      // I'm not sure where, but somewhere the name is double-encoded.
      // Let's just skip one encoding.
      drupal_set_title(format_username($form['#user']));

      if (isset($form['field_exclude'])) {
        // The exclude from lists field has that stupid "n/a".
        unset($form['field_exclude'][LANGUAGE_NONE]['#options']['_none']);

        // And force a default for it.
        if (is_null($form['field_exclude'][LANGUAGE_NONE]['#default_value'])) {
          $form['field_exclude'][LANGUAGE_NONE]['#default_value'] = 0;
        }
      }

      // Hide the VCA fields if they don't have access to VCA info.
      if (!user_access('access vca info')) {
        $form['field_vca']['#access'] = FALSE;
      }

      // Hide the Expense fields if they don't have access to Expense info.
      if (!user_access('access expense info')) {
        $form['field_expenses']['#access'] = FALSE;
      }

      // Hide the Notes fields if they can't edit profiles.
      if (!user_access('administer users')) {
        $form['profile_main']['field_programmatic']['#access'] = FALSE;
        $form['profile_main']['field_administrative_financial']['#access'] = FALSE;
      }

      return;

    case 'block_admin_configure':
      if (arg(4) == 'workflow_extensions' && arg(5) == 0) {
        // Force the title, etc. to the top.
        $form['settings']['#weight'] = -10;

        // Add our stuff.
        $form['tta_custom'] = array(
          '#type' => 'fieldset',
          '#title' => t('CAPT Services'),
          '#weight' => 0,
          );

        // Get the terms in the Status vocabulary.
        $query = "SELECT td.tid, td.name FROM {taxonomy_term_data} td "
          . "INNER JOIN {taxonomy_vocabulary} tv ON tv.vid=td.vid "
          . "WHERE tv.name = :voc ";
        $terms = db_query($query, array(':voc' => 'Active Status'))->fetchAllKeyed();
        $form['tta_custom']['tta_custom_workflow_change_form_visibility'] = array(
          '#type' => 'checkboxes',
          '#options' => $terms,
          '#title' => t('Show block when node status is:'),
          '#default_value' => variable_get('tta_custom_workflow_change_form_visibility', array()),
          );

        // Set a submit handler.
        $form['#submit'][] = 'tta_custom_workflow_extensions_block_submit';
      }
      return;
  }
}

/**
 * Submission handler for block stuff above.
 */
function tta_custom_workflow_extensions_block_submit($form, &$form_state) {
  variable_set('tta_custom_workflow_change_form_visibility',
    array_filter($form_state['values']['tta_custom_workflow_change_form_visibility']));
}

/**
 * Implements tta_custom_block_view_alter().
 * Control Workflow_extensions visibility.
 */
function tta_custom_block_view_alter(&$data, $block) {
  if ($block->module == 'workflow_extensions' && $block->delta == 0) {
    // Get the node being shown.
    $node = menu_get_object();

    // We can only do this on Services and Trackers.
    if (!$node || !in_array($node->type, array('service', 'tracker'))) {
      return;
    }

    // Get its status field.
    $status = array_pop(field_get_items('node', $node, 'field_status'));

    // And when we want to see it.
    $show_when = variable_get('tta_custom_workflow_change_form_visibility', array());

    // If it's not a status we want, then throw the block away.
    if (!in_array($status['tid'], $show_when)) {
      unset($data['content']);
    }
  }
}

/**
 * Helper function to float a number.
 */
function _tta_custom_float($n) {
  return 0 + $n;
}

/**
 * Implements hook_cron();
 */
function tta_custom_cron() {
  $interval = variable_get('tta_custom_cron_interval', 86400);
  $last = variable_get('tta_custom_cron_last', 0);

  // Is it time to run again?
  if (REQUEST_TIME >= $last + $interval) {
    // Are any VCAs ready to be expired?
    $query = "SELECT n.nid, n.title "
      . "FROM {node} n "
      . "INNER JOIN {field_data_field_contract_dates} d ON d.entity_id = n.nid "
      . "INNER JOIN {field_data_field_vca_status} s ON s.entity_id = n.nid "
      . "WHERE n.type = 'vca' AND d.field_contract_dates_value2 <= FROM_UNIXTIME(:now) "
      . "AND n.status = 1 "
      . "AND s.field_vca_status_value = 1 "
      ;
    $result = db_query($query, array(':now' => REQUEST_TIME));

    // Get the chosen roles to be notified.
    $addr_list = _tta_custom_notify_list();

    foreach ($result as $row) {
      // Tell them which one.
      $params = array(
        'node' => l($row->title, "node/$row->nid"),
        );
      drupal_mail('tta_custom',
        'vca expire',
        $addr_list,
        language_default(),
        $params);

      watchdog('tta_custom', '!node has reached its end date and is expired.',
        array('!node' => l($row->title, "node/$row->nid")), WATCHDOG_WARNING);

      // Now actually inactivate it.
      $vca = entity_metadata_wrapper('node', node_load($row->nid));
      $vca->field_vca_status->set(0);

      // Mark it as a revision and provide a log message.
      $vca->revision->set(TRUE);
      $vca->log->set(t('End date reached - expired by cron.'));

      // Save it back to the db.
      $vca->save();
    }
  }

  // Save when this ran.
  variable_set('tta_custom_cron_last', REQUEST_TIME);
}

/**
 * Stuff for creating a VCA.
 */
function tta_custom_vca_form($account) {
  return tta_custom_node_form($account, 'vca', 'Create Vendor Consulting Agreement');
}

/**
 * Stuff for creating a VCA.
 */
function tta_custom_expense_form($account) {
  return tta_custom_node_form($account, 'expense', 'Create Labor and Travel Expense');
}

/**
 * Helper function for creating VCAs and Expense reports.
 */
function tta_custom_node_form($account, $type, $title) {
  global $language, $user;

  $node = new stdClass();

  $node->uid = $user->uid;
  $node->type = $type;
  $node->name = (isset($user->name) ? $user->name : '');
  $node->language = $language->language;

  if (empty($account->og_user_node)) {
    drupal_set_message(t('!name is not part of a group yet, so I can\'t do this.',
      array('!name' => theme('username', array('account' => $account)))), 'error');
    drupal_goto("user/$node->uid");
  }

  $node->og_group_ref = $account->og_user_node;

  // Same thing, different fields in content.
  $node->field_related_user = array(LANGUAGE_NONE => array(array('target_id' => $account->uid)));

  // I don't know why the node module is not available, but this might help.
  if (!function_exists('node_form')) {
    module_load_include('inc', 'node', 'node.pages');
  }

  drupal_set_title(t($title), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node);
  return $output;
}

/**
 * Implements hook_node_access().
 */
function tta_custom_node_access($node, $op, $account) {
  switch ($op) {
    case 'create':
      return NODE_ACCESS_IGNORE;

    case 'view':
      // If the user is in the core group, allow it, otherwise let someone else decide.
      if (og_is_member('node', variable_get('tta_custom_core_group', 0), 'user')) {
        // Yes, they are, so allow access.
        return NODE_ACCESS_ALLOW;
      }

      // Limit access to VCAs and Expense reports.
      if (in_array($node->type, array('vca', 'expense'))) {
        return (user_access("access $node->type info") ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY);
      }

      return NODE_ACCESS_IGNORE;

    case 'update':
      // Is this node type in a workflow?
      $workflow = workflow_get_workflow_type_map_by_type($node->type);
      if ($workflow) {
        // Yes, the node is in a workflow.

        // See if we should be allowed edit access.
        $sid = workflow_node_current_state($node);
        $results = db_query('SELECT * from {workflow_access} where sid = :sid AND rid IN (:rids)',
          array(':sid' => $sid, ':rids' => array_keys($account->roles)));
        $allowed = $results->fetchAll();

        // See if any role grants access.
        $permit = FALSE;
        foreach ($allowed as $grant) {
          $permit |= $grant->grant_update;
        }

        // If no rule allowed edit, then deny it right now.
        if (!$permit) {
          return NODE_ACCESS_DENY;
        }
      }
      // The node is not part of a workflow, so we just drop into group checking.

      // But, first, a quick detour.
      // They want Costs to be editable only if the owning tracker is.
      if ($node->type == 'costs') {
        $tracker = field_get_items('node', $node, 'field_tracker');
        if ($tracker) {
          // Sometimes entity_reference gives us the node already.
          if (isset($tracker[0]['entity'])) {
            $tr_node = $tracker[0]['entity'];
          }
          else {
            $tr_node = node_load(array_pop(array_pop($tracker)));
          }
          if (node_access('update', $tr_node)) {
            // It's allowed, do nothing.
            continue;
          }
          else {
            // It's not allowed, so disable this one too.
            return NODE_ACCESS_DENY;
          }
        }
      }

      // Get the node's group value(s).
      $groups = field_get_items('node', $node, 'og_group_ref');

      // Add the Core group, because those users are magic.
      $core = variable_get('tta_custom_core_group', 0);
      $groups['core'] = array('target_id' => $core);

      foreach ($groups as $group) {
        // See if the current user is a member of the node's group.
        if (og_is_member('node', $group['target_id'], 'user')) {
          // Yes, they are, so allow access.
          return NODE_ACCESS_ALLOW;
        }
      }
      // The user is not in the same group as the node, so deny the access.
      return NODE_ACCESS_DENY;

    case 'delete':
      return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Decide whether or not to show certain profile fields.
 */
function tta_custom_field_attach_view_alter(&$output, $context) {
  global $user;
  switch ($context['entity_type']) {
    case 'profile2':
      // Are they looking at a profile?
      if ($context['view_mode'] != 'account') {
        // Nope, skip it.
        return;
      }
      // If the user is viewing his/her own profile, we don't worry.
      if ($context['entity']->uid == $user->uid) {
        return;
      }

      if ($context['entity']->type == 'main') {
        // Let special people have access.
        if (user_access('bypass node access')) {
          return;
        }

        // Get the Core group, because those users are magic.
        $core = variable_get('tta_custom_core_group', 0);
        // Is current user in Core?
        if (og_is_member('node', $core, 'user')) {
          // Yep, let them skate.
          return;
        }

        // Get full user objects for both current user and one being viewed.
        $user = user_load($user->uid);
        $account = user_load($context['entity']->uid);

        // Get the user's group value(s).
        $groups = field_get_items('user', $account, 'og_user_node');

        // Check if current user is in the same group(s).
        foreach ($groups as $group) {
          if (og_is_member('node', $group['target_id'], 'user')) {
            // Yes, they are in the viewed user's group.
            return;
          }
        }

        // If we get this far, the viewing user is not allowed
        // to see certain fields, so let's remove them from the
        // $output array.

        // List of fields for view control.
        $protected = array(
          'field_programmatic',
          'field_administrative_financial',
          );

        foreach ($protected as $field_name) {
          unset($output[$field_name]);
        }
      }
      return;
  }
}

/**
 * Implements hook_clone_node_alter().
 *
 * Show the clone link only on Services with at least one
 * Tracker that has been approved.
 */
function tta_custom_clone_node_alter($node, $context) {
  $creation = workflow_get_creation_state_by_type($node->type);

  $query = "SELECT target_sid "
    . "FROM {workflow_transitions} "
    . "WHERE sid = :creation "
    . "AND roles LIKE '%author%' "
    ;
  // Get the first state an author can go to.
  $new_state = db_query($query, array(':creation' => $creation))->fetchField();
  $node->workflow = $new_state;
  unset($node->field_related_trackers);
}

/**
 * Implements hook_clone_access_alter().
 *
 * Show the clone link only on Services with at least one
 * Tracker that has been approved.
 */
function tta_custom_clone_access_alter(&$access, $node) {
  global $user;

  switch ($node->type) {
    case 'service':
      // Get all trackers attached to this service.
      $wrapper = entity_metadata_wrapper('node', $node);
      if ($node->field_related_trackers) {
        // On which states do we allow cloning?
        $states = array_filter(variable_get('tta_custom_clone_states', array()));

        // And let's assume that it will not be allowed.
        // @TODO: This is not site-friendly.
        $access = FALSE;

        // Check every tracker.
        foreach (array_pop($node->field_related_trackers) as $tracker_info) {
          if (isset($tracker_info['entity'])) {
            $tracker = $tracker_info['entity'];
            $state = workflow_get_workflow_node_by_nid($tracker->nid)->sid;
          }
          else {
            $state = workflow_get_workflow_node_by_nid($tracker_info['target_id'])->sid;
          }
          // If any is in a selected state, allow the link.
          if (in_array($state, $states)) {
            // Yes, then allow the link.
            $access = TRUE;
            return;
          }
        }
      }

    case 'tracker':
      $access = FALSE;
  }
}

/**
 * Implements hook_child_nodes_button().
 *
 * Decide whether or not to show the "Create xxx" button.
 */
function tta_custom_child_nodes_button($node, $child_type) {
  global $user;
  // If user is special, get out now.
  // @TODO: Do we really want this bypass?
  if (user_access('bypass node access')) {
    return TRUE;
  }

  // Get the node's group value(s).
  $groups = field_get_items('node', $node, 'og_group_ref');

  // Add the Core group, because those users are magic.
  $core = variable_get('tta_custom_core_group', 0);
  $groups['core'] = array('target_id' => $core);

  // Check the parent type first.
  switch ($node->type) {
    // For both services and trackers, check the status.
    case 'service':
    case 'tracker':
      $status = array_pop(field_get_items('node', $node, 'field_status'));
      $show_status = array_filter(variable_get('tta_custom_child_nodes_status', array()));
      // Is it in a status that we allow the button?
      if (!in_array($status['tid'], $show_status)) {
        // Nope, kill it.
        return FALSE;
      }
  }

  switch ($child_type) {
    case 'costs':
      // We are alowing only one Cost per Group per tracker.
      // We already know this is not a special (admin) user.
      // Get the related Costs.
      $costs = field_get_items('node', $node, 'field_related_costs');
      if ($costs) {
        // See if the current user is a member of the node's group(s).
        $deny = TRUE;
        foreach ($groups as $group) {
          if (og_is_member('node', $group['target_id'], 'user')) {
            // They are, so they are golden so far.
            $deny = FALSE;
            break;
          }
        }
        if ($deny) {
          // No they are not, so no need to go farther.
          return FALSE;
        }

        $nids = array_flatten($costs);

        // Reload the user object so we can get the OG field.
        $user = user_load($user->uid);
        $groups = field_get_items('user', $user, 'og_user_node');

        // Check each of the user's groups to see if any of the related costs
        // are in that group.
        // Note that all Costs belong to Core, either as a primary (og_group_ref)
        // or secondary (og_group_ref2) ownership.
        $query = "SELECT 1 FROM {og_membership} m "
          . "INNER JOIN {node} n ON n.nid = m.etid "
          . "WHERE m.etid IN (:nids) "
          . "AND m.field_name = 'og_group_ref' "  // Use only primary group ownership.
          . "AND m.group_type = 'node' "
          . "AND m.gid = :gid "
          . "AND n.status = 1 "   // Make sure the node is published.
          ;
        foreach ($groups as $grp) {
          $args = array(':nids' => $nids, ':gid' => $grp['target_id']);
          // Check for an existing cost record.
          if (db_query($query, $args)->fetchField()) {
            // Yes, so prevent button.
            // @TODO: Is this right? What if user in more than one group?
            return FALSE;
          }
        }
      }
      break;

    case 'expense':
      $vca_dates = array_pop(field_get_items('node', $node, 'field_contract_dates'));
      // Fake the timezone.
      $end = strtotime($vca_dates['value2'] . ' UTC');

//      dsm("vca dates $end ".print_r($vca_dates, true));
      break;
  }

  foreach ($groups as $group) {
    // See if the current user is a member of the node's group(s).
    if (og_is_member('node', $group['target_id'], 'user')) {
      return TRUE;
    }
  }

  // Nope the user is not in any of the node's groups.
  return FALSE;
}

/**
 * Helper function to flatten arrays, such as returned by field_get_items().
 */
function array_flatten($array) {
  $values = array();
  foreach (array_values($array) as $value) {
    if (is_array($value)) {
      $values = array_merge($values, array_flatten($value));
    }
    else {
      $values[] = $value;
    }
  }
  return $values;
}

/**
 * Implements hook_user_view().
 *
 * Show the user roles.
 */
function tta_custom_user_view($account, $view_mode, $langcode) {
  // I'm not sure where, but somewhere the name is double-encoded.
  // Let's just skip one encoding.
  drupal_set_title(format_username($account));

  // Find all the VCAs for this user and check them for overlap.
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'vca')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_vca_status', 'value', 1, '=')
    ->fieldCondition('field_related_user', 'target_id', $account->uid, '=')
    ->fieldOrderBy('field_contract_dates', 'value', 'ASC')
    ->execute();

  if ($entities) {
    // EFQ returns an array keyed by nid and containing objects with nid, vid, and type.
    $nodes = entity_load('node', array_keys($entities['node']));

    foreach ($nodes as $nid => $node) {
      // If we already know it overlaps, skip it.
      if (isset($node->tta_custom_overlaps_another)) {
        continue;
      }

      // Check if this vca overlaps with any others.
      $ret = tta_custom_check_vca_overlap($node);

      // The check will return a nid if there is an overlap.
      if (!empty($ret)) {
        // Found one, so no need to check it too.
        $nodes[$ret]->tta_custom_overlaps_another = $nid;
      }
    }
  }

  $xf_settings = field_extra_fields_get_display('user', 'user', $view_mode);
  $profile = tta_custom_load_profile($account);
  if (empty($profile)) {
    drupal_set_message(t('This user does not yet have profile data.'), 'error');
    return;
  }

  $groups = field_get_items('user', $account, 'og_user_node');
  if (empty($groups)) {
    drupal_set_message(t('This user has not yet been assigned to a group.'), 'warning');
  }

  // Should we throw up a "Create xxx" button?
  if ($xf_settings['vca_button']['visible'] && !empty($groups)) {
    $type = tta_custom_get_user_type($profile);

    if ($type == 'Consultant') {
      // If the user is a consultant, then show "Create VCA".
      if (user_access('create vca content')) {
        $account->content['vca_button'] = array(
          '#type' => 'item',
          '#title' => '',
          '#markup' => l(t('Create a VCA'), "create_vca/$account->uid",
            array('attributes' => array('class' => array('button', 'create-vca')))),
          );
      }
    }
    else {
      // If the user is not a consultant, then show a "Create Expense" button.
      if (user_access('create expense content')) {
        $account->content['vca_button'] = array(
          '#type' => 'item',
          '#title' => '',
          '#markup' => l(t('Create Labor and Travel Expense'), "create_expense/$account->uid",
            array('attributes' => array('class' => array('button', 'create-expense')))),
          );
      }
    }
  }

  // Let's see if they really want to see the email address.
  if ($xf_settings['email_address']['visible']) {
    $account->content['email_address'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Email Address'),
      '#attributes' => array('class' => array('email-address')),
      );
    $account->content['email_address']['email_address'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#markup' => l($account->mail, $account->mail),
      );
  }

  // Let's see if they really want to see the roles.
  if ($xf_settings['roles']['visible']) {
    // Copy the roles.
    $roles = $account->roles;

    // We just assume authenticated.
    unset($roles[DRUPAL_AUTHENTICATED_RID]);
    if ($roles) {
      $account->content['roles'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Roles'),
        '#attributes' => array('class' => array('roles')),
        );
      $account->content['roles']['roles'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => theme('item_list', array('items' => $roles)),
        );
    }
  }

  // Is the current user allowed to see VCAs and are we showing them?
  if (user_access('access vca info') && $xf_settings['vcas']['visible']) {
    $vcas = field_get_items('user', $account, 'field_vca');

    // Do the table only if there are any to report.
    if ($vcas) {
      $items = array();
      foreach ($vcas as $info) {
        $items[] = $info['target_id'];
      }
      $items = entity_load('node', $items);

      // I'm sure there's a better way to get group names, but I don't know what it is.
      $groups = db_query("SELECT nid, title FROM {node} WHERE type='resource_team'")->fetchAllKeyed();
      $groups[''] = t('Unknown');

      $vca_list = array(
        'rows' => array(),
        'header' => array(
          t('VCA Number'),
          t('Team'),
          t('Start'),
          t('End'),
          t('Labor'),
          t('Labor Remaining'),
          t('Travel'),
          t('Travel Remaining'),
          t('Fixed Price'),
          t('Labor Hrs Allowed'),
          t('Active'),
          ),
       'attributes' => array('class' => array('vca-list')),
        );

      // Spin through them and build a table.
      foreach ($items as $vca) {
        // Extract the dates for this vca.
        $dates = array_pop(array_pop($vca->field_contract_dates));
        $labor = array_pop(array_pop(array_pop($vca->field_labor_amount)));
        $labor_rem = array_pop(array_pop(array_pop($vca->field_labor_remaining)));
        $travel = array_pop(array_pop(array_pop($vca->field_travel_amount_allowed)));
        $travel_rem = array_pop(array_pop(array_pop($vca->field_travel_remaining)));
        $active = array_pop(array_pop(array_pop($vca->field_vca_status)));
        $fixed = array_pop(array_pop(array_pop($vca->field_fixed_price)));
        if ($fixed) {
          $labor_allowed = t('n/a');
        }
        else {
          $labor_allowed = number_format(array_pop(array_pop(array_pop($vca->field_labor_hours_allowed))), 2);
        }

        // Build a table row.
        $link = l($vca->title, "node/$vca->nid");
        $group = field_get_items('node', $vca, 'og_group_ref');
        if ($group) {
          $group = array_pop(array_pop($group));
        }
        else {
          drupal_set_message(t('Could not locate the group membership in !vca.',
            array('!vca' => $link)), 'warning');
          $group = '';
        }
        $vca_list['rows'][] = array(
          $link,
          $groups[$group],
          format_date(strtotime($dates['value']), 'custom', 'M d, Y'),
          format_date(strtotime($dates['value2']), 'custom', 'M d, Y'),
          '$' . number_format($labor, 2),
          '$' . number_format($labor_rem, 2),
          '$' . number_format($travel, 2),
          '$' . number_format($travel_rem, 2),
          ($fixed ? t('Yes') : t('No')),
          $labor_allowed,
          ($active ? t('Yes') : t('No')),
          );
      }

      // Display the data.
      $account->content['vcas'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Vendor Consulting Agreements'),
        );
      $account->content['vcas']['list'] = array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => theme('table', $vca_list),
        '#attributes' => array('class' => array('vca-list')),
        );
    }
  }

  // Is the current user allowed to see expenses and are we showing them?
  if (user_access('access expense info') && $xf_settings['expenses']['visible']) {
    // Let's see if this user has any Expense reports.
    $expenses = field_get_items('user', $account, 'field_expenses');
    if ($expenses) {
      $items = array();
      foreach ($expenses as $info) {
        $items[] = $info['target_id'];
      }
      $items = entity_load('node', $items);

      $expenses_list = array(
        'rows' => array(),
        'header' => array(
          t('Invoice Number'),
          t('Received'),
          t('Processed'),
          t('Labor'),
          t('Travel'),
          t('Total'),
          t('Invoice'),
          ),
       'attributes' => array('class' => array('expense-list')),
        );

      // Spin through them and build a table.
      foreach ($items as $expense) {
        $node = entity_metadata_wrapper('node', $expense);

        // Extract the dates for this expense report.
        $rec_date = $node->field_date_received->value();
        $proc_date = $node->field_date_processed->value();
//        dsm($proc_date, 'date_processed');

        $invoice = $expense->field_invoice;
//        dsm($node->field_invoice->raw(), 'invoice');
        if ($invoice) {
          $invoice = array_pop(array_pop($invoice));
          $invoice = l(t('Invoice'), file_create_url($invoice['uri']));
        }
        else {
          $invoice = t('Missing');
        }

        // Build a table row.
        $expenses_list['rows'][] = array(
          l($expense->title, "node/$expense->nid"),
//          format_date(strtotime($rec_date['value']), 'custom', 'M d, Y'),
//          format_date(strtotime($proc_date['value']), 'custom', 'M d, Y'),
          format_date($rec_date, 'custom', 'M d, Y'),
          format_date($proc_date, 'custom', 'M d, Y'),
          '$' . number_format(array_pop(array_pop(array_pop($expense->field_labor_expense))), 2),
          '$' . number_format(array_pop(array_pop(array_pop($expense->field_total_travel_cost))), 2),
          '$' . number_format(array_pop(array_pop(array_pop($expense->field_total_expenses))), 2),
          $invoice,
          );
      }

      // If there is data, display the table.
      if ($expenses_list['rows']) {
        $account->content['expenses'] = array(
          '#type' => 'user_profile_category',
          '#title' => t('Labor and Travel Expenses'),
          );
        $account->content['expenses']['list'] = array(
          '#type' => 'user_profile_item',
          '#title' => '',
          '#markup' => theme('table', $expenses_list),
          '#attributes' => array('class' => array('expense-list')),
          );
      }
    }
  }
}

/**
 * Implements hook_user_login().
 *
 * Check the user profile for completeness.
 */
function tta_custom_user_login(&$edit, $account) {
  $account_fields = array(
    'og_user_node' => t('group'),
//    'picture' => t('picture'),
    );
  $profile_fields = array(
    'field_first_name' => t('first name'),
    'field_last_name' => t('last name'),
    'field_user_title' => t('user title'),
    'field_hourly_rate' => t('hourly rate'),
    'field_type' => t('type'),
    );

  foreach ($account_fields as $field => $desc) {
    $data = field_get_items('user', $account, $field);
    if (empty($data)) {
      drupal_set_message(t('The @field information is missing from your account.',
        array('@field' => $desc)), 'warning');
      // Send them to the account page.
      $_GET['destination'] = "user/$account->uid/edit";
    }
  }

  $profile = tta_custom_load_profile($account);
  if (empty($profile)) {
    return;
  }

  foreach ($profile_fields as $field => $desc) {
    $data = field_get_items('profile2', $profile, $field);
    if (empty($data)) {
      drupal_set_message(t('The @field information is missing from your profile.',
        array('@field' => $desc)), 'warning');
      // Send them to the profile page.
      $_GET['destination'] = "user/$account->uid/edit/main";
    }
  }
}

/**
 * Helper function to see what's being submitted.
 * In the form, add
 *   array_unshift($form['#submit'], 'tta_custom_dump');
 */
function tta_custom_dump($form, $form_state) {
  drupal_set_message('<pre>'.print_r($form_state['values'], true).'</pre>');
}

/**
 * Check if we need to add Core group to Costs.
 */
function tta_custom_costs_add_core($node) {
  global $user;
  // Provide a complete user object.
  $user = user_load($user->uid);

  $core = variable_get('tta_custom_core_group', 0);

  // If they are not allowed to set the group, then prepopulate it.
  if (!isset($node->og_group_ref)) {
    $node->og_group_ref = $user->og_user_node;
  }

  if ($node->og_group_ref[LANGUAGE_NONE][0]['target_id'] != $core) {
    $node->og_group_ref2 =
      array(LANGUAGE_NONE => array(array('target_id' => $core)));
    // Save the change.
    field_attach_presave('node', $node);
    field_attach_update('node', $node);
  }
}

/**
 * Check if People in trackers overlap.
 */
function tta_custom_check_tracker_overlap($node) {
  global $user;
  // We need to figure out if this user is already in use in some other tracker.
  // Get the associated Tracker node.
  $tracker_nid = array_pop(array_pop(field_get_items('node', $node, 'field_tracker')));
  $tracker = array_pop(entity_load('node', array($tracker_nid)));

  // Get the dates from the Tracker.
  $dates = array_pop(field_get_items('node', $tracker, 'field_tentative_dates'));

  // Add the tracker and costs node ids.
  $dates['tid'] = $tracker_nid;
  $dates['cid'] = $node->nid;

  // Now, we have to loop through all the consultants.
  $collection = field_get_items('node', $node, 'field_individual_costs');
  // Need a list of entity ids for the load.
  $entities = array_flatten($collection);

  // Okay, get all the field collection entities.
  $items = entity_load('field_collection_item', $entities);

  foreach ($items as $eid => $collection) {
    // Get the user info.
    $uid = array_pop(array_pop(field_get_items('field_collection_item', $collection, 'field_user')));

    // Add the user id.
    $dates['uid'] = $uid;

    // Make sure the current values for this consultant are gone.
    db_delete('tta_custom_sched')
      ->condition('uid', $uid)
      ->condition('tid', $dates['tid'])
      ->condition('cid', $dates['cid'])
      ->execute();

    // Now, let's see if there is any overlap in the table.
    $query = db_select('tta_custom_sched', 't')
      ->fields('t', array('tid'))
      ->condition('uid', $uid)
      ->condition('tid', $tracker_nid, '<>')  // Don't check the tracker we are on right now.
    // And the dates overlap in any of three ways...
    ->condition(
      db_or()
        ->condition(
          db_and()
            ->condition('value', $dates['value2'], '<=')
            ->condition('value2', $dates['value2'], '>=')
          )
        ->condition(
          db_and()
            ->condition('value2', $dates['value'], '>=')
            ->condition('value2', $dates['value2'], '<=')
          )
        ->condition(
          db_and()
            ->condition('value', $dates['value'], '<=')
            ->condition('value2', $dates['value2'], '>=')
          )
        )
      ;
    $overlap = $query->execute()->fetchField();

    // If there's an overlap, warn them.
    $account = user_load($uid);
    $profile = tta_custom_load_profile($account);

    if ($overlap) {
      $over_node = node_load($overlap);
      drupal_set_message(t(variable_get('tta_custom_person_overlap',
      '@name is unavailable because the dates of the associated tracker form overlap with those of !other.'),
      array('@name' => format_username($account), '!other' => l($over_node->title, "node/$over_node->nid"))), 'warning');
    }

    // Now save the new values.
    // Note, all db ops are part of the node transaction.
    drupal_write_record('tta_custom_sched', $dates);

    // Begin determination of need for a VCA.
    $type = tta_custom_get_user_type($profile);

    if ($type == 'Consultant') {
      $staff_teams = array_filter(variable_get('tta_custom_staff_teams', array()));
      if (isset($node->og_group_ref)) {
        $groups = $node->og_group_ref;
      }
      else {
        // Hmm, it doesn't seem to have a group yet, so it should
        // be the user's groups.
        $user = user_load($user->uid);
        $groups = $user->og_user_node;
      }

      $groups = array_pop($groups);

      // Get the user's labor cost.
      if ($labor = field_get_items('field_collection_item', $collection, 'field_labor_cost_sub_total')) {
        $labor = array_pop(array_pop($labor));
      }
      else {
        drupal_set_message(t('Labor Cost Subtotal is missing.'), 'error');
        continue;
      }

      foreach ($groups as $grp) {
        if (in_array($grp['target_id'], $staff_teams)) {
          $vcas = field_get_items('user', $account, 'field_vca');
          if ($vcas) {
            $vcas = array_flatten($vcas);
            $entities = entity_load('node', $vcas);
            $no_vca = TRUE;
            foreach ($entities as $vca) {
              $vca_dates = field_get_items('node', $vca, 'field_contract_dates');
              if ($dates['value'] >= $vca_dates[0]['value']
                && $dates['value2'] <= $vca_dates[0]['value2']) {
                // Okay, this VCA is active at this time. Don't check any more.
                $no_vca = FALSE;

                // See if there are enough resources left in the VCA.
                // Start by getting the user's travel cost.
                if ($travel = field_get_items('field_collection_item', $collection, 'field_total_travel_cost')) {
                  $travel = array_pop(array_pop($travel));
                }
                else {
                  drupal_set_message(t('Travel Cost Subtotal is missing.'), 'error');
                  break;
                }

                // Get the user's labor hours.
                if ($hours = field_get_items('field_collection_item', $collection, 'field_total_time')) {
                  $hours = array_pop(array_pop($hours));
                }
                else {
                  drupal_set_message(t('Total Time is missing.'), 'error');
                  break;
                }

                // How much do they have left?
                $labor_remaining = array_pop(array_pop(field_get_items('node', $vca, 'field_labor_remaining')));
                $travel_remaining = array_pop(array_pop(field_get_items('node', $vca, 'field_travel_remaining')));
                $labor_hours_remaining = array_pop(array_pop(field_get_items('node', $vca, 'field_labor_hours_remaining')));

                // Is there enough labor budget left?
                if ($labor > $labor_remaining) {
                  drupal_set_message(t(variable_get('tta_custom_cost_exceeds_vca', '!name exceeds @field in !vca.'),
                    array('!vca' => l($vca->title, "node/$vca->nid"),
                      '@field' => 'Labor',
                      '!name' => l(format_username($account), "user/$account->uid"))), 'warning');
                }

                // Is there enough travel budget left?
                if ($travel > $travel_remaining) {
                  drupal_set_message(t(variable_get('tta_custom_cost_exceeds_vca', '!name exceeds @field in !vca.'),
                    array('!vca' => l($vca->title, "node/$vca->nid"),
                      '@field' => 'Travel',
                      '!name' => l(format_username($account), "user/$account->uid"))), 'warning');
                }

                // Is there enough labor hours budget left?
                if ($hours > $labor_hours_remaining) {
                  drupal_set_message(t(variable_get('tta_custom_cost_exceeds_vca', '!name exceeds @field in !vca.'),
                    array('!vca' => l($vca->title, "node/$vca->nid"),
                      '@field' => 'Labor Hours',
                      '!name' => l(format_username($account), "user/$account->uid"))), 'warning');
                }

                break;
              }
            }
            if ($no_vca) {
              $message = variable_get('tta_custom_no_active_vca', '@name is unavailable because there is no active VCA.');
              drupal_set_message(t($message, array('@name' => format_username($account))), 'error');
            }
          }
        }
      }
    }
  }
}

/**
 * Initialze the "Remaining" fields in the VCA.
 */
function tta_custom_initialize_vca($node) {
  $node->field_travel_remaining = $node->field_travel_amount_allowed;
  $node->field_labor_remaining = $node->field_labor_amount;
  $node->field_labor_hours_remaining = $node->field_labor_hours_allowed;

  // Update the db.
  field_attach_presave('node', $node);
  field_attach_update('node', $node);
}

/**
 * Check if VCAs overlap.
 */
function tta_custom_check_vca_overlap($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $related_user = $wrapper->field_related_user->uid->value();
  $contract_dates = $wrapper->field_contract_dates->value();

  // Build the query.
  $query = db_select('node', 'n')
    ->fields('n', array('nid'));
  $query->innerJoin('field_data_field_related_user', 'ru', 'ru.entity_id = n.nid');
  $query->innerJoin('field_data_field_contract_dates', 'cd', 'cd.entity_id = n.nid');
  $query->innerJoin('field_data_field_vca_status', 'vs', 'vs.entity_id = n.nid');

  // Where it's the same user, but not this node, nor unpublished nodes.
  $query->condition('ru.field_related_user_target_id', $related_user)
    ->condition('n.nid', $node->nid, '<>')
    ->condition('n.status', 1)

    // Only look at active VCAs.
    ->condition('vs.field_vca_status_value', 1)

    // And the dates overlap in any of three ways...
    ->condition(
      db_or()
        ->condition(
          db_and()
            ->condition('cd.field_contract_dates_value', $contract_dates['value2'], '<=')
            ->condition('cd.field_contract_dates_value2', $contract_dates['value2'], '>=')
          )
        ->condition(
          db_and()
            ->condition('cd.field_contract_dates_value2', $contract_dates['value'], '>=')
            ->condition('cd.field_contract_dates_value2', $contract_dates['value2'], '<=')
          )
        ->condition(
          db_and()
            ->condition('cd.field_contract_dates_value', $contract_dates['value'], '<=')
            ->condition('cd.field_contract_dates_value2', $contract_dates['value2'], '>=')
          )
        )
    ;
  $results = $query->execute()->fetchField();

  // Did we get a hit?
  if ($results) {
    $other = array_pop(entity_load('node', array($results)));
    drupal_set_message(t(variable_get('tta_custom_vca_overlap',
      'The dates of !this overlap with those of !other.'),
      array(
        '!other' => l($other->title, "node/$other->nid"),
        '!this' => l($node->title, "node/$node->nid"),
        )),
      'error', FALSE);
  }

  // Let the caller know if there was an overlap.
  return $results;
}

/**
 * Update a VCA with the current expense report.
 */
function tta_custom_update_vca($node) {
  $expense = entity_metadata_wrapper('node', $node);

  // If this is a consultant, there will be an associated VCA link.
  if ($expense->field_corresponding_vca->value()) {
    $vca = $expense->field_corresponding_vca;
  }
  else {
    // Not a consultant, so there is no VCA to update.
    return;
  }

  // If this is not a node revision, we can't check the values for changes.
  if (empty($node->revision)) {
    drupal_set_message(t('You should not be able to edit this content without creating a revision.'),
      'warning');
    return;
  }

  // Key is "remaining" field, value is source field.
  $fields_to_check = array(
    'field_travel_remaining' => 'field_total_travel_cost',
    'field_labor_remaining' => 'field_labor_expense',
    );

  // If it's not fixed price, we also track labor remaining.
  // If this field is missing, it will throw an error.
  if (!$vca->field_fixed_price->value()) {
    $fields_to_check['field_labor_hours_remaining'] = 'field_labor_hours';
  }

  $changed = FALSE;

  // Run through all the fields.
  foreach ($fields_to_check as $remaining => $source) {
    // If this is an update, get the old values to back out.
    if (isset($node->original)) {
      $old = $node->original;
      $old_value = field_get_items('node', $old, $source);
      if ($old_value !== FALSE) {
        $old_value = array_pop(array_pop($old_value));
      }
      else {
        $fld = $expense->$source->info();
        drupal_set_message(t('The "@label" (@field_name) field is empty.',
          array('@label' => $fld['label'], '@field_name' => $source)), 'error');
        // Skip the rest of the loop.
        continue;
      }
    }
    else {
      // Must be new, so nothing to back out.
      $old_value = 0;
    }

    // Get the new value.
    $new_value = $expense->$source->value();
    if (is_null($new_value)) {
      $fld = $vca->getPropertyInfo($source);
      drupal_set_message(t('The "@label" field is empty.',
        array('@label' => $fld['label'])), 'error');
      // Skip the rest of the loop.
      continue;
    }

    // Has the field value changed?
    if ($new_value != $old_value) {
      // Get the old value.
      if (is_null($vca->$remaining->value())) {
        // There is no value.
        $fld = $vca->$remaining->info();
        drupal_set_message(t('The "@label" field is empty.',
          array('@label' => $fld['label'])), 'error');

        // Set it to something, which will update the VCA.
        $value_remaining = - $new_value;
      }
      else {
        // There is an existing value, so we have to give back the old amount
        // so that we can take away the new amount.
        $value_remaining = $vca->$remaining->value() + $old_value - $new_value;
      }

      // Save the new value.
      $vca->$remaining->set($value_remaining);
      $changed = TRUE;

      // Is there any value remaining?
      if ($value_remaining <= 0) {
        $fld = $vca->$remaining->info();
        drupal_set_message(t(variable_get('tta_custom_vca_overspent', 'The "@label" amount is overspent on VCA "!vca".'),
          array('@label' => $fld['label'], '!vca' => l($vca->title->value(), 'node/' . $vca->nid->value()))), 'error');
        // Skip the rest of the loop.
        continue;
      }
    }
  }

  // Check if all the remaining values have reached zero.
  $inactivate = TRUE;
  foreach ($fields_to_check as $remaining => $source) {
    $inactivate &= ($vca->$remaining->value() <= 0);
  }

  if ($inactivate) {
    // Mark it inactive.
    $vca->field_vca_status->set(0);
    $changed = TRUE;
    drupal_set_message(t('The budgeting for !vca has been exceeded so it has been made inactive.',
      array('!vca' => l($vca->title->value(), 'node/' . $vca->nid->value()))), 'warning');
  }

  // Has anything changed? If so, we have to update the VCA.
  if ($changed) {
    // This updates the database.
    $vca->log->set(t("Updated by !expense", array('!expense' => l($node->title, "node/$node->nid"))));
    $vca->save();
    watchdog('tta_custom', 'Updated !vca due to updates in !expense.',
      array('!vca' => l($vca->label(), 'node/' . $vca->nid->value()), '!expense' => l($node->title, "node/$node->nid")));
  }
}

/**
 * Helper function to get email address list.
 */
function _tta_custom_notify_list() {
  // Get the chosen roles to be notified.
  $notify = array_filter(variable_get('tta_custom_threshhold_roles', array()));

  // Get all the user accounts in those roles.
  $users = db_query("SELECT DISTINCT uid FROM {users_roles} WHERE rid IN (:rids) ",
    array(':rids' => $notify))->fetchCol();
  $accounts = entity_load('user', $users);
  $addresses = array();
  foreach ($accounts as $account) {
    $addresses[] = $account->mail;
  }

  return implode(',', $addresses);
}

/**
 * Helper function to check VCA threshholds.
 */
function tta_custom_check_threshholds($node) {
  // Check threshholds on VCAs.
  $values = variable_get('tta_custom_vca_threshholds', '2500 5000 25000');
  $th = preg_split('/[\s,]+/', $values, -1, PREG_SPLIT_NO_EMPTY);
  $th = array_map('_tta_custom_float', $th);

  // Sort the threshholds in descending order.
  rsort($th, SORT_NUMERIC);

  // Get the chosen roles to be notified.
  $addr_list = _tta_custom_notify_list();

  $uid = array_pop(array_pop(field_get_items('node', $node, 'field_related_user')));

  // Get the totals for each user.
  $query = "SELECT YEAR(d.field_contract_dates_value) AS vca_year, "
    . "SUM(l.field_labor_amount_value + t.field_travel_amount_allowed_value) AS total "
    . "FROM {field_data_field_related_user} ru "
    . "INNER JOIN {field_data_field_labor_amount} l ON l.entity_id = ru.entity_id "
    . "INNER JOIN {field_data_field_travel_amount_allowed} t ON t.entity_id = ru.entity_id "
    . "INNER JOIN {field_data_field_contract_dates} d ON d.entity_id = ru.entity_id "
    . "INNER JOIN {node} n ON n.nid = ru.entity_id "
    . "WHERE ru.bundle = 'vca' "
    . "AND ru.field_related_user_target_id = :uid "
    . "AND n.status = 1 "
    . "GROUP BY vca_year "
    ;
  $result = db_query($query, array(':uid' => $uid));

  foreach ($result as $row) {
    // Check if any threshhold exceeded.
    foreach ($th as $threshhold) {
      if ($row->total + 0 >= $threshhold) {
        $account = user_load($uid);
        drupal_set_message(t('User !name exceeded @limit threshhold for @year.',
          array(
            '!name' => theme('username', array('account' => $account)),
            '@limit' => ('$' . number_format($threshhold, 2)),
            '@year' => $row->vca_year,
            )));

        // Okay let's send an email to all the Financial Managers.
        $params = array(
          'recipients' => $addr_list,
          'limit' => ('$' . number_format($threshhold, 2)),
          'year' => $row->vca_year,
          'consultant' => $account,
          );
        drupal_mail('tta_custom',
          'threshhold',
          $addr_list,
          language_default(),
          $params);
        watchdog('tta_custom', 'VCA threshhold notice sent for !user.',
          array('!user' => theme('username', array('account' => $account))));

        // Quit checking if we hit one.
        break;
      }
    }
  }
}

/**
 * Implements hook_mail();
 * Build email messages.
 */
function tta_custom_mail($key, &$message, $params) {
  switch ($key) {
    case 'threshhold':
      $message['send'] = TRUE;
      $message['subject'] = t(variable_get('tta_custom_email_threshhold_exceeded_subject', 'VCA Threshhold Exceeded'));
      $message['body'][] = t(variable_get('tta_custom_email_threshhold_exceeded_body',
        '!name has exceeded the @limit threshhold for @year.'),
        array(
          '!name' => theme('username', array('account' => $params['consultant'])),
          '@limit' => $params['limit'],
          '@year' => $params['year'],
          ));
      return;

    case 'vca expire':
      $message['send'] = TRUE;
      $message['subject'] = t(variable_get('tta_custom_email_vca_expired_subject', 'VCA Expired'));
      $message['body'][] = t(variable_get('tta_custom_email_vca_expired_body',
        '!vca has reached its end date and is expired.'),
        array(
          '!vca' => $params['node'],
          ));
      return;
  }
}

/**
 * Implements hook_node_insert().
 *
 * For Costs:
 *   Check if consultants overlaps any other trackers.
 *
 * Note: Be careful, node_save() is not yet complete.
 */
function tta_custom_node_insert($node) {
  switch ($node->type) {
    case 'costs':
      // Check if the associated tracker overlaps any other.
      tta_custom_check_tracker_overlap($node);

      // Costs always need to be available to the Core group.
      tta_custom_costs_add_core($node);
      return;

    case 'vca':
      // Initialize the "Remaining" fields.
      tta_custom_initialize_vca($node);

      // Check for overlaps in dates.
      tta_custom_check_vca_overlap($node);

      // Check for threshholds per user.
      tta_custom_check_threshholds($node);

      return;

    case 'expense':
      // Decrement VCA values.
      tta_custom_update_vca($node);
      return;
  }
}

/**
 * Implements hook_node_update().
 * Check if consultants overlaps any other trackers.
 * Note: Be careful, node_save() is not yet complete.
 */
function tta_custom_node_update($node) {
  switch ($node->type) {
    case 'costs':
      // Check if the associated tracker overlaps any other.
      tta_custom_check_tracker_overlap($node);

      // Costs always need to be available to the Core group.
      tta_custom_costs_add_core($node);
      return;

    case 'vca':
      // Check for overlaps in dates.
      tta_custom_check_vca_overlap($node);

      // Check for threshholds per user.
      tta_custom_check_threshholds($node);

      return;

    case 'expense':
      // Decrement VCA values.
      tta_custom_update_vca($node);
      return;
  }
}

/**
 * Implements hook_node_view().
 * Add a "Create expense" button to a VCA.
 */
function tta_custom_node_view($node, $view_mode, $langcode) {
  $wrapper = entity_metadata_wrapper('node', $node);
  switch ($node->type) {
    case 'tracker':
      // See if we need to alert to past workflow status.
      $alerts = array_filter(variable_get('tta_custom_tracker_alert', array()));
      // It is possible that no alerts will be set.
      if ($alerts) {
        foreach ($alerts as $sid => $x) {
          $state = workflow_get_workflow_states(array('sid' => $sid));
          $alerts[$sid] = $state[0]->state;
        }

        $history = db_query('SELECT h.hid, h.nid, h.old_sid, h.sid, h.uid, h.stamp, h.comment '
          . 'FROM {workflow_node_history} h '
          . 'LEFT JOIN {users} u ON h.uid = u.uid '
          . 'WHERE h.nid = :nid '
          . 'AND h.sid IN (:alerts) '
          . 'AND h.sid <> :current '
          . 'ORDER BY h.stamp DESC, h.hid DESC ',
          array(':nid' => $node->nid, ':alerts' => array_keys($alerts), ':current' => $node->workflow))->fetchAll();

        $type = node_type_get_name($node);

        foreach ($history as $hist) {
          // The FALSE prevents multiple messages.
          drupal_set_message(t(variable_get('tta_custom_tracker_state_alert', 'This @type has been in the @state state.'),
            array('@type' => $type, '@state' => $alerts[$hist->sid])), 'status', FALSE);
        }
      }
      return;

    case 'vca':
      // Don't show button if VCA is not active.
      $status = $wrapper->field_vca_status->value();

      // Show message if the VCA is inactive.
      if (!$status) {
        drupal_set_message(t(variable_get('tta_custom_vca_inactive', 'This VCA is not active.')),
          'warning');
        return;
      }

      // Show message if the VCA is not yet active.
      $dates = $wrapper->field_contract_dates->value();
      $start = strtotime($dates['value']);
      if ($start > REQUEST_TIME) {
        drupal_set_message(t(variable_get('tta_custom_vca_not_started', 'This VCA is not yet active.')),
          'warning');
        return;
      }

      // Show a message if it overlaps with another.
      tta_custom_check_vca_overlap($node);

      // If it's active and the user may create an expense, show a button.
      if ($status && user_access('create expense content')) {
        $uid = $wrapper->field_related_user->uid->value();
        $node->content['expense_button'] = array(
          '#type' => 'item',
          '#title' => '',
          '#markup' => l(t('Create Labor and Travel Expense'), "create_expense/$uid",
            array('attributes' => array('class' => array('button', 'create-expense')))),
          );
      }
      return;
  }
}

/**
 * Implements hook_field_attach_presave().
 * Reinitialize fields that get blanked out.
 */
function tta_custom_field_attach_presave($entity_type, $entity) {
  if ($entity_type == 'node' && $entity->type == 'expense') {
    $fields = tta_custom_travel_cost_fields();
    // Expenses have one extra field.
    $fields[] = 'field_other_travel';

    foreach ($fields as $field) {
      $value = field_get_items($entity_type, $entity, $field);
      if (empty($value)) {
        $info = field_info_instance($entity_type, $field, $entity->type);
        $entity->{$field} = array(LANGUAGE_NONE => $info['default_value']);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function tta_custom_block_info() {
  return array(
    'vca user info' => array('info' => t('VCA: User Information'), 'cache' => DRUPAL_NO_CACHE),
    'vca button' => array('info' => t('VCA: Create Button'), 'cache' => DRUPAL_NO_CACHE),
    'my_rts_and_roles' => array('info' => t('My RTs_and Roles'), 'cache' => DRUPAL_NO_CACHE),
    );
}

/**
 * Implements hook_block_view().
 */
function tta_custom_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'my_rts_and_roles':
      global $user;
      $output = '';

      $user = user_load($user->uid);
      $groups = field_get_items('user', $user, 'og_user_node');

      $rts = array();
      foreach ($groups as $group) {
        $rts[] = $group['target_id'];
      }

      $my_rt = array('no RT');
      if ($rts) {
        $my_rt = db_query("SELECT nid, title FROM {node} WHERE nid IN (:nids)", array(':nids' => $rts))
          ->fetchAllKeyed();
      }

      $roles = $user->roles;
      unset($roles[DRUPAL_AUTHENTICATED_RID]);
      $output = t('You are a @roles in the @rts.',
        array(
          '@rts' => implode(', ', $my_rt),
          '@roles' => implode(', ', $roles),
          ));

      $block['content'] = '<div style="color: #ffffff;">' . $output . '</div>';
      break;

    case 'vca button':
      $a2 = arg(2);
      if (arg(0) == 'user' && empty($a2)) {
        $account = menu_get_object('user');
        $profile = tta_custom_load_profile($account);
        $type = tta_custom_get_user_type($profile);

        if ($type == 'Consultant') {
          $block['content'] = l(t('Create a VCA'), "create_vca/$account->uid",
            array('attributes' => array('class' => array('button'))));
        }
      }
      break;

    case 'vca user info':
      if (arg(0) == 'node') {
        $node = menu_get_object();
        $acct = array_pop(field_get_items('node', $node, 'field_related_user'));
        $profile = tta_custom_load_profile($acct['target_id']);

        // Get the data from the profile.
        $first = array_pop(field_get_items('profile2', $profile, 'field_first_name'));
        $first = $first['value'];
        $last = array_pop(field_get_items('profile2', $profile, 'field_last_name'));
        $last = $last['value'];

        if (empty($first) || empty($last)) {
          drupal_set_message(t('The first or last name for !user is missing.',
            array('!user' => theme('username', array('account' => $account)))),
            'warning');
          $name = t('Profile incomplete');
        }
        else {
          $name = $first . ' ' . $last;
        }

        $block['subject'] = check_plain($name);

        // User profile fields to display.
        $fields = array(
          'Organization' => 'field_organization',
          'Hourly Rate' => 'field_hourly_rate',
          );
        $output = '';
        foreach ($fields as $title => $field) {
          $item = field_get_items('profile2', $profile, $field);
          if (empty($item)) {
            $item = t('Missing');
            drupal_set_message(t('The @field field is empty; please see that it gets entered.',
              array('@field' => $title)), 'warning');
          }
          else {
            $item = array_pop(array_pop(field_get_items('profile2', $profile, $field)));
          }
          $output .= '<div class="field-name-' . drupal_html_class($field) . ' field-label-inline clearfix">';
          $output .= '<div class="field-label">' . check_plain($title) . ':</div>';
          $output .= '<div class="field-items">'
            . '<div class="field-item">'
            . $item
            . '</div>'
            . '</div>'
            . '</div>';

          $block['content'] = $output;
        }
      }
      break;
  }

  return $block;
}

/**
 * Helper to extract the user type.
 */
function tta_custom_get_user_type($profile) {
  $type = $profile->field_type;
  if (empty($type)) {
    drupal_set_message(t('@name does not have a "type" setting.', array('@name' => $name)), 'warning');
    $type = t('unknown');
  }
  else {
    $type = array_pop(array_pop(array_pop($type)));
  }
  return $type;
}
